#!/usr/bin/env python3.11

import os
from typing import Optional

import click

from src.code_reader import CodeReader
from src.exceptions import TranslatorError
from src.translator import Tokenizer, Parser
from src.preprocessor import make_processor, TextProcessor
from src.compilers import AdtBuilder

from translators.finalizer import TranslationFinalizer


@click.command()
@click.option(
    "-f",
    "--file",
    required=True,
    help="choose code-source file",
    type=str,
)
@click.option(
    "-e",
    is_flag=True,
    default=False,
    help="will dump preprocessing result and stop compilation",
)
@click.option(
    "--output-path",
    default=".",
    help="write compilation result by path",
    type=str,
)
def edl(file: str, e: bool, output_path: str) -> None:
    """run edl translator"""
    if file is None:
        raise TranslatorError("source file not choosed")

    proc: Optional[TextProcessor] = None
    try:
        reader = CodeReader(file)
        proc = make_processor(reader)
        proc.process()
    except (TranslatorError, OSError) as err:
        os.write(2, f"preprocessing error:\n{err}".encode("utf-8"))
        exit(1)

    if e:
        try:
            proc.dump(f"{output_path}/out.txt")
            # break compilation
            exit(0)
        except (TranslatorError, OSError) as err:
            os.write(2, f"preprocessing result dump error:\n{err}".encode("utf-8"))
            exit(1)

    lexer = Tokenizer()
    parser = Parser(lexer, reader)
    compiler = AdtBuilder(parser)

    # choose translator
    scada_fmt_translator = TranslationFinalizer()
    try:
        compiler.run(scada_fmt_translator)
    except (TranslatorError, OSError) as err:
        os.write(2, f"compilation error:\n{err}\n".encode("utf-8"))
        exit(1)

    scada_fmt_translator.write_alarms(path=output_path)
    scada_fmt_translator.write_connections(path=output_path)
    scada_fmt_translator.write_alarms_formats(path=output_path)
    scada_fmt_translator.write_values_aliases(path=output_path)


if __name__ == "__main__":
    edl()
